<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CorePCL;
using <#= _DataModel.ProjectName #>.Base;
using <#= _DataModel.ProjectName #>.Implementation.ViewModel;
using <#= _DataModel.ProjectName #>.Interface.Service;
using <#= _DataModel.ProjectName #>.ViewModel;

namespace <#= _DataModel.ProjectName #>.Implementation.Service
{
    public class <#= _DataModel.ServiceName #><T> : BaseService<T>, <#= _DataModel.ServiceInterfaceName #><T>
        where T : BaseViewModel
    {
        public <#= _DataModel.ServiceName #>(Func<string, Dictionary<string, ParameterTypedValue>, BaseNetworkAccessEnum, Task<T>> networkInterface)
            :base(networkInterface)
        {
        }

        public async Task <#= _DataModel.EventName #>(<#= _DataModel.ViewModelName #> model)
        {
            string requestURL = "/path/{Parameter}";
            var httpMethod = BaseNetworkAccessEnum.Get;
            var parameters = new Dictionary<string, ParameterTypedValue>()
            {
                //{"Parameter", model.Property},
            };
            await _NetworkInterface(requestURL, parameters, httpMethod);
        }
    }
}
